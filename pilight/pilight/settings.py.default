############
# App config

# Mode that the driver runs in:
#   noop = The driver does not make any attempt to
#          output its colors - useful for development
#   standalone = The driver outputs color data directly to
#                the device specified by LIGHTS_DEV_NAME
#   server = The driver pushes its color data to a
#            message queue. Intended for use with
#            pilight-client
LIGHTS_DRIVER_MODE = 'standalone'

# Installation name
# Can be anything you like - shown on the web UI
LIGHTS_INSTALLATION_NAME = "PiLight"

# Number of LEDs in the string
LIGHTS_NUM_LEDS = 50

# Require a valid Django user to change the lights?
# Recommend setting this to True for externally
# accessible installations
LIGHTS_REQUIRE_AUTH = False

# Minimum amount of time that must pass before another
# set of color data is computed by the driver (secs)
# Sets an effective refresh rate throttle. Note that
# on slow devices (such as Raspberry Pi), adding several
# transforms means that your "frame time" may be longer
# than this value anyway, in which case it has no effect
#
# Suggested values:
#    - High performance machine: 0.03
#    - Mid performance machine: 0.06
#    - Low performance machine: 0.1
# It is not recommended that you set this to a lower
# value than 0.03
LIGHTS_UPDATE_INTERVAL = 0.03

# Microcontroller type used on the LED string
# Known values:
#  - 'ws2801'
# (Currently not used - placeholder for future extension)
LIGHTS_MICROCONTROLLER = 'ws2801'

# Device name for the SPI output in your Occidentals installation
LIGHTS_DEV_NAME = '/dev/spidev0.0'

# Time between message polls that the driver should use (secs)
# Recommend leaving this greater than 1.0
LIGHTS_MESSAGE_CHECK_INTERVAL = 2.0

# These multipliers are applied before final output to the LEDs
# to get colors that are truer to the desired color - the LEDs
# tend to have a bias towards blue, and a lesser extent red
LIGHTS_MULTIPLIER_R = 0.9
LIGHTS_MULTIPLIER_G = 1
LIGHTS_MULTIPLIER_B = 0.66


############
# Pika setup
PIKA_HOST_NAME = 'localhost'
PIKA_QUEUE_NAME = 'pilight-queue'
PIKA_QUEUE_NAME_COLORS = 'pilight-colors'


######################
# Django core settings
DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'pilight',                      # Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        'USER': 'pilight',
        'PASSWORD': 'pilight',
        'HOST': 'localhost',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '',                      # Set to empty string for default.
    }
}

# Hosts/domain names that are valid for this site; required if DEBUG is False
# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts
ALLOWED_HOSTS = []

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/var/www/example.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://example.com/media/", "http://media.example.com/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/var/www/example.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://example.com/static/", "http://static.example.com/"
STATIC_URL = '/static/'

# Where to redirect on successful login
LOGIN_REDIRECT_URL = '/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'f$#^-&trsug99)7*#ss*5*wz-kwri5c7_t-bufir_srh76vjq+'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.core.context_processors.static',
    'django.core.context_processors.tz',
    'django.contrib.messages.context_processors.messages',
    'pilight.context_processors.extra_settings',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

# Use a database cache for persistence across processes
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'pilight_cache',
    }
}

ROOT_URLCONF = 'pilight.urls'

TEST_RUNNER = 'django.test.runner.DiscoverRunner'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'pilight.wsgi.application'

import os
TEMPLATE_DIRS = (os.path.join(os.path.dirname(__file__), '..', 'templates').replace('\\','/'),)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'bootstrap3',
    'home',
)

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}